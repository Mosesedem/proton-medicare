generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     Int          @id @default(autoincrement())
  email                  String       @unique
  firstName              String?
  lastName               String?
  phone                  String?
  phoneNumber            String?
  dateOfBirth            DateTime?
  password               String
  createdAt              DateTime     @default(now())
  updatedAt              DateTime     @updatedAt
  verificationCode       String?
  resetCode              String?
  imageUrl               String?
  verificationCodeExpiry DateTime?
  resetCodeExpiry        DateTime?
  verificationToken      String?      @unique
  tokenExpiry            DateTime?
  isVerified             Boolean      @default(false)
  verificationPin        String?
  resetPin               String?
  resetPinExpiry         DateTime?
  resetAttempts          Int          @default(0)
  passwordUpdtaedAt      DateTime?
  enrollments            Enrollment[]
  payments               Payment[]

  @@map("users")
}

model Enrollment {
  id              Int       @id @default(autoincrement())
  firstName       String
  lastName        String
  email           String
  phone           String
  dateOfBirth     DateTime
  maritalStatus   String
  plan            String
  duration        String
  amount          Float
  paymentStatus   String
  headshotUrl     String
  headshotPath    String
  referral        String?
  userId          Int
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  planId          String
  status          String
  lastPaymentDate DateTime
  user            User      @relation(fields: [userId], references: [id])
  payments        Payment[]

  @@map("enrollments")
}

model Payment {
  id                Int      @id @default(autoincrement())
  paystackId        String   @unique
  reference         String   @unique
  amount            Float
  currency          String
  status            String
  channel           String
  paidAt            DateTime
  createdAt         DateTime
  metadata          Json
  authorization     Json
  userId            Int
  enrollmentId      Int
  plan              String
  planCode          String
  isSubscription    Boolean
  customerEmail     String
  customerName      String
  customerCode      String
  cardLast4         String
  cardType          String
  authorizationCode String

  user       User       @relation(fields: [userId], references: [id])
  enrollment Enrollment @relation(fields: [enrollmentId], references: [id])

  @@index([userId])
  @@index([enrollmentId])
}
